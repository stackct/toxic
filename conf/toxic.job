httpRetries=5
make.target=all
dockerImageTag=latest
dockerImageTagSuffix=
artifactsDir=`"${memory.job.jobDir}/artifacts"`
job.trigger.repoCommit=true
job.init.script.0=new File("${memory['project.workDir']}/gen/job").mkdirs()
job.init.script.1=new File("${memory['project.workDir']}/gen/job/build.groovy").text="assert 0 == execWithEnv(['make', '${memory['make.target']}'], ['DOCKER_IMAGE_TAG': '${memory.dockerImageTag}', 'DOCKER_IMAGE_TAG_SUFFIX': '${memory.dockerImageTagSuffix}', 'ARTIFACTS_DIR': '${memory.artifactsDir}'], 14400, '${memory['project.workDir']}', null)"
setupDir=`"${memory['project.workDir']}/toxic/setup"`
teardownDir=`"${memory['project.workDir']}/toxic/teardown"`
doDir=`"${memory['project.workDir']}/gen/job/build.groovy"`
doDir1=`"${memory['setupDir']}"`
doDir2=`"${memory['project.workDir']}/toxic/tests"`
doDir3=`"${memory['teardownDir']}"`
job.end.script.0=memory['job'].parseJUnitXmlFilesInDir(new File("${memory['project.workDir']}/gen/test"))
job.actionIfCompleteSuccess.Release=execWithEnv(['make', 'auto-release'], ['ARTIFACTS_DIR': '${memory.artifactsDir}'], 14400, '${memory['project.workDir']}', null); return out?.toString()
