function "Debug" {
  description "Prints out debugging information"
  path        "{{ libPath }}/std/debug"

  arg "value"
}

function "ExportProperty" {
  description "Set a global property"
  path        "{{ libPath }}/std/property/export"

  arg "key"
  arg "value"
  arg "force", false
}

function "RandomString" {
  description "Generates a random alphanumeric string of the given length"
  path        "{{ libPath }}/std/random_string"

  arg "length"
  arg "prefix", false

  output "value"
}

function "RandomNumericString" {
  description "Generates a random numeric string of the given length"
  path        "{{ libPath }}/std/random_numeric_string"

  arg "length"
  arg "prefix", false
  arg "suffix", false

  output "value"
}

function "UUID" {
  description "Generates a UUID"
  path        "{{ libPath }}/std/uuid"

  output "value"
}

function "VerifyUrls" {
  description "Verifies a 200 on GET request on a URL or a list of URLs; if waitMs is provided retries every second, up to the give number of waitMs milliseconds for each url, before failing"
  path        "{{ libPath }}/std/verify"

  arg "url"
  arg "waitMs", false

  output "result"
}

function "VerifyDatabase" {
  description "Verifies that a database is responsive before returning, or timesout after a waitMs milliseconds"
  path        "{{ libPath }}/std/verifyDatabase"

  arg "waitMs", false

  output "result"
}

function "FlushOutput" {
  description "A noop function used to instruct pickle to copy output results to memory when the last step in a higher order function would have been a call to another higher order function"
  path        "{{ libPath }}/std/flush_output"
}

function "GetDate", {
  description "Returns the current date offset by optional number of days"
  path        "{{ libPath }}/std/get_date"

  arg "offsetDays", false, 0
  arg "utc",        false, true
  arg "format",     false, "yyyyMMdd"
  
  output "date"
}

function "StartHttpServer", {
  description "starts a http server that can be used as a partner simulator"
  path "{{ libPath }}/std/interceptor/start"
  arg "port", false, 8080
  arg "route", false, "/"

  output "httpServer"
  output "requestCounter"
}

function "StopHttpServer", {
  description "stops the provided http server"
  path "{{ libPath }}/std/interceptor/stop"

  arg "httpServer"
}

function "WaitForRequests", {
  description "waits until the specified number of requests have been received by the server started from StartHttpServer. This is useful when waiting for a queued job to send a http request"
  path "{{ libPath }}/std/interceptor/wait_for_requests"

  arg "requestCounter"
  arg "waitForCount"
  arg "waitForAtMostMilliseconds"

  output "requestCounter"
  output "success"
}
